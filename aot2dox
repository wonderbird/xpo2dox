#!/bin/bash
#
# Convert all AX XPO files of an AOT export to files which contain only code.
#
# The converted files will be stored in a tree which is similar to
# the source tree. Files will be named *.xpo
#
# To check the progress, you can use the watch command and compare the number of
# files in source and target:
#
# watch -n 5 'find ../igus/ax40 -type f | wc -l; find ./ax40 -type f | wc -l'
#
# Usage:
#
# aot2dox SOURCE TARGET
#
#    SOURCE    Directory containing a checkout of our AX40 AOT
#
#    TARGET    Name of a directory to receive the code-only XPO files.
#              This directory will be erased at the beginning of the script.
#              It will be recreated from scratch then.
#
# TODO ensure that the target folder can be specified. At the moment ax40 is hard coded.
# TODO error checking
#
SOURCE_DIR="$1"
TARGET_DIR="$2"

# Find the directory of this script
# see https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itsel
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$SCRIPT_DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

OLD_IFS=$IFS
IFS=$'\n'

if [ -e "$TARGET_DIR" ]; then
    echo "ERROR: Target directory $TARGET_DIR should not exist beforehand."
    exit 1
fi

echo "Create target directory tree in $TARGET_DIR ..."
for DIR in `find "$SOURCE_DIR" \( -type d ! -path "*/.git/*" ! -path "*/.git" ! -path "*/.vscode/*" ! -path "*/.vscode" ! -path "*/Application Developer Documentation/*" ! -path "*/Application Developer Documentation" ! -path "*/Application Documentation/*" ! -path "*/Application Documentation" ! -path "*/System Documentation/*" ! -path "*/System Documentation" \)`; do
    if [[ ! "$DIR" =~ "$EXCLUDE_DIR_REGEX" ]]; then 
        TARGET_SUBDIR=`echo "$DIR" | sed "s-${SOURCE_DIR}/*--"`
        mkdir -p "$TARGET_DIR/$TARGET_SUBDIR"
    fi
done

echo "Extract code from XPO files ..."
for FILE in `find "$SOURCE_DIR" \( -type f -iname "*.xpo" ! -path "*/.git/*" ! -path "*/.git" ! -path "*/.vscode/*" ! -path "*/.vscode" ! -path "*/Application Developer Documentation/*" ! -path "*/Application Developer Documentation" ! -path "*/Application Documentation/*" ! -path "*/Application Documentation" ! -path "*/System Documentation/*" ! -path "*/System Documentation" \)`; do
    TARGET=`echo "$FILE" | sed "s|${SOURCE_DIR}/*|${TARGET_DIR}/|"`
    cat "$FILE" | "$SCRIPT_DIR/xpo2dox" > "$TARGET.cs"
done
IFS=$OLD_IFS

echo "Done"
