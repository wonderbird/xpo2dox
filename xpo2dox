#!/usr/bin/awk -f
#
# Convert an XPO file into something that looks strongly like C# or Java.
#
# This script takes input from stdin. It assumes that the input originates
# from an XPO file exported from Microsoft Dynamics AX 4.0. It converts the
# file so that it looks very much like C# or Java code.
#
# The output is intended to be parsed by Doxygen in order to create source
# code documentation.
#

BEGIN {
    FS="^ +#";

    is_in_class = 0;
    is_job = 0;

    indent = "";
}

{
    if ($1 ~ "Exportfile for AOT version 1.0 or later")
    {
        indent = "    ";

        print "/** xpo2dox generated namespace for all classes. */ namespace AX { // " $1;
    }

    #####
    # Handle classes
    else if ($2 ~ /(class)|(interface)/)
    {
        is_in_class = 1;

        gsub(/extends/, ":", $2);
        gsub(/implements/, ":", $2);

        print indent $2;
    }
    else if (is_in_class && $2 ~ /^}/ )
    {
        # The closing brace will be printed at the end of the file instead of the
        # end of the class declaration.
        #
        # As a consequence, all class members and methods will be inside the braces.
        is_in_class = 0;
        indent = "        ";

        print indent "// " $2;
    }
    else if ($1 ~ "ENDCLASS")
    {
        indent = "    ";

        print indent "} // " $1;
    }
    # /Handle classes
    #####

    #####
    # Handle jobs
    else if ($1 ~ "JOBVERSION")
    {
        is_job = 1;

        print indent "/** xpo2dox generated wrapper class for all jobs. */ partial class Jobs { // " $1;

        indent = "        ";
    }
    else if (is_job && $1 ~ "ENDSOURCE")
    {
        is_job = 0;
        indent = "    ";
        print indent "} // " $1;
    }
    # /Handle jobs
    #####

    # End of namespace AX
    else if ($1 ~ "\\*\\*\\*Element: END")
    {
        indent = "";

        print indent "} // " $1;
    }

    # Normal line of code
    else if ($2 != "")
    {
        print indent $2
    }

    # Structuring element of the AX XPO (no code)
    else
    {
        print indent "// " $1
    }
}
